[
    {
        "name": "cppcheck2",
        "display_name": "CppCheck2.6",
        "description": "C/C++ Static Analyzer",
        "license": "GPL-3.0",
        "libscheme_set": [],
        "image_url": null,
        "task_processes": [
            "analyze",
            "datahandle"
        ],
        "scan_app": "codelint",
        "scm_url": "",
        "run_cmd": "",
        "envs": "",
        "build_flag": false,
        "checkrule_set": [
            {
                "real_name": "accessForwarded",
                "display_name": "accessForwarded",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "accessForwarded",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Access of forwarded variable 'v'.",
                "disable": false
            },
            {
                "real_name": "accessMoved",
                "display_name": "accessMoved",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "accessMoved",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Access of moved variable 'v'.",
                "disable": false
            },
            {
                "real_name": "argumentSize",
                "display_name": "argumentSize",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "argumentSize",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Buffer 'buffer' is too small, the function 'function' expects a bigger buffer in 2nd argument",
                "disable": false
            },
            {
                "real_name": "arithOperationsOnVoidPointer",
                "display_name": "arithOperationsOnVoidPointer",
                "severity": "info",
                "category": "convention",
                "rule_title": "arithOperationsOnVoidPointer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'varname' is of type 'vartype'. When using void pointers in calculations, the behaviour is undefined.",
                "disable": false
            },
            {
                "real_name": "arrayIndexOutOfBounds",
                "display_name": "arrayIndexOutOfBounds",
                "severity": "error",
                "category": "correctness",
                "rule_title": "arrayIndexOutOfBounds",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Array 'arr[16]' accessed at index 16, which is out of bounds.",
                "disable": false
            },
            {
                "real_name": "arrayIndexOutOfBoundsCond",
                "display_name": "arrayIndexOutOfBoundsCond",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "arrayIndexOutOfBoundsCond",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Array 'arr[16]' accessed at index 16, which is out of bounds.",
                "disable": false
            },
            {
                "real_name": "arrayIndexThenCheck",
                "display_name": "arrayIndexThenCheck",
                "severity": "info",
                "category": "convention",
                "rule_title": "arrayIndexThenCheck",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Array index 'i' is used before limits check.",
                "disable": false
            },
            {
                "real_name": "assertWithSideEffect",
                "display_name": "assertWithSideEffect",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "assertWithSideEffect",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Assert statement calls a function which may have desired side effects: 'function'.",
                "disable": false
            },
            {
                "real_name": "assignBoolToFloat",
                "display_name": "assignBoolToFloat",
                "severity": "info",
                "category": "convention",
                "rule_title": "assignBoolToFloat",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Boolean value assigned to floating point variable.",
                "disable": false
            },
            {
                "real_name": "assignBoolToPointer",
                "display_name": "assignBoolToPointer",
                "severity": "error",
                "category": "correctness",
                "rule_title": "assignBoolToPointer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Boolean value assigned to pointer.",
                "disable": false
            },
            {
                "real_name": "assignIfError",
                "display_name": "assignIfError",
                "severity": "info",
                "category": "convention",
                "rule_title": "assignIfError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Mismatching assignment and comparison, comparison '' is always false.",
                "disable": false
            },
            {
                "real_name": "AssignmentAddressToInteger",
                "display_name": "AssignmentAddressToInteger",
                "severity": "info",
                "category": "convention",
                "rule_title": "AssignmentAddressToInteger",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Assigning a pointer to an integer is not portable.",
                "disable": false
            },
            {
                "real_name": "assignmentInAssert",
                "display_name": "assignmentInAssert",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "assignmentInAssert",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Assert statement modifies 'var'.",
                "disable": false
            },
            {
                "real_name": "assignmentInCondition",
                "display_name": "assignmentInCondition",
                "severity": "info",
                "category": "convention",
                "rule_title": "assignmentInCondition",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Suspicious assignment in condition. Condition 'x=y' is always true.",
                "disable": false
            },
            {
                "real_name": "AssignmentIntegerToAddress",
                "display_name": "AssignmentIntegerToAddress",
                "severity": "info",
                "category": "convention",
                "rule_title": "AssignmentIntegerToAddress",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Assigning an integer to a pointer is not portable.",
                "disable": false
            },
            {
                "real_name": "autoVariables",
                "display_name": "autoVariables",
                "severity": "error",
                "category": "correctness",
                "rule_title": "autoVariables",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Address of local auto-variable assigned to a function parameter.",
                "disable": false
            },
            {
                "real_name": "autovarInvalidDeallocation",
                "display_name": "autovarInvalidDeallocation",
                "severity": "error",
                "category": "correctness",
                "rule_title": "autovarInvalidDeallocation",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Deallocation of an auto-variable results in undefined behaviour.",
                "disable": false
            },
            {
                "real_name": "badBitmaskCheck",
                "display_name": "badBitmaskCheck",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "badBitmaskCheck",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?",
                "disable": false
            },
            {
                "real_name": "bitwiseOnBoolean",
                "display_name": "bitwiseOnBoolean",
                "severity": "info",
                "category": "convention",
                "rule_title": "bitwiseOnBoolean",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Boolean expression 'expression' is used in bitwise operation. Did you mean '&&'?",
                "disable": false
            },
            {
                "real_name": "boostForeachError",
                "display_name": "boostForeachError",
                "severity": "error",
                "category": "correctness",
                "rule_title": "boostForeachError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.",
                "disable": false
            },
            {
                "real_name": "bufferAccessOutOfBounds",
                "display_name": "bufferAccessOutOfBounds",
                "severity": "error",
                "category": "correctness",
                "rule_title": "bufferAccessOutOfBounds",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Buffer is accessed out of bounds: buf",
                "disable": false
            },
            {
                "real_name": "CastAddressToIntegerAtReturn",
                "display_name": "CastAddressToIntegerAtReturn",
                "severity": "info",
                "category": "convention",
                "rule_title": "CastAddressToIntegerAtReturn",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Returning an address value in a function with integer return type is not portable.",
                "disable": false
            },
            {
                "real_name": "CastIntegerToAddressAtReturn",
                "display_name": "CastIntegerToAddressAtReturn",
                "severity": "info",
                "category": "convention",
                "rule_title": "CastIntegerToAddressAtReturn",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Returning an integer in a function with pointer return type is not portable.",
                "disable": false
            },
            {
                "real_name": "catchExceptionByValue",
                "display_name": "catchExceptionByValue",
                "severity": "info",
                "category": "convention",
                "rule_title": "catchExceptionByValue",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Exception should be caught by reference.",
                "disable": false
            },
            {
                "real_name": "charBitOp",
                "display_name": "charBitOp",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "charBitOp",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "When using 'char' variables in bit operations, sign extension can generate unexpected results.",
                "disable": false
            },
            {
                "real_name": "charLiteralWithCharPtrCompare",
                "display_name": "charLiteralWithCharPtrCompare",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "charLiteralWithCharPtrCompare",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Char literal compared with pointer 'foo'. Did you intend to dereference it?",
                "disable": false
            },
            {
                "real_name": "checkCastIntToCharAndBack",
                "display_name": "checkCastIntToCharAndBack",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "checkCastIntToCharAndBack",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Storing func_name() return value in char variable and then comparing with EOF.",
                "disable": false
            },
            {
                "real_name": "clarifyCalculation",
                "display_name": "clarifyCalculation",
                "severity": "info",
                "category": "convention",
                "rule_title": "clarifyCalculation",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Clarify calculation precedence for '+' and '?'.",
                "disable": false
            },
            {
                "real_name": "clarifyCondition",
                "display_name": "clarifyCondition",
                "severity": "info",
                "category": "convention",
                "rule_title": "clarifyCondition",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Suspicious condition (assignment + comparison); Clarify expression with parentheses.",
                "disable": false
            },
            {
                "real_name": "clarifyStatement",
                "display_name": "clarifyStatement",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "clarifyStatement",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?",
                "disable": false
            },
            {
                "real_name": "commaSeparatedReturn",
                "display_name": "commaSeparatedReturn",
                "severity": "info",
                "category": "convention",
                "rule_title": "commaSeparatedReturn",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comma is used in return statement. The comma can easily be misread as a ';'.",
                "disable": false
            },
            {
                "real_name": "compareBoolExpressionWithInt",
                "display_name": "compareBoolExpressionWithInt",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "compareBoolExpressionWithInt",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of a boolean expression with an integer other than 0 or 1.",
                "disable": false
            },
            {
                "real_name": "comparePointers",
                "display_name": "comparePointers",
                "severity": "error",
                "category": "correctness",
                "rule_title": "comparePointers",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparing pointers that point to different objects",
                "disable": false
            },
            {
                "real_name": "compareValueOutOfTypeRangeError",
                "display_name": "compareValueOutOfTypeRangeError",
                "severity": "info",
                "category": "convention",
                "rule_title": "compareValueOutOfTypeRangeError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparing expression of type 'unsigned char' against value 256. Condition is always true.",
                "disable": false
            },
            {
                "real_name": "comparisonError",
                "display_name": "comparisonError",
                "severity": "info",
                "category": "convention",
                "rule_title": "comparisonError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Expression '(X & 0x6) == 0x1' is always false.",
                "disable": false
            },
            {
                "real_name": "comparisonFunctionIsAlwaysTrueOrFalse",
                "display_name": "comparisonFunctionIsAlwaysTrueOrFalse",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "comparisonFunctionIsAlwaysTrueOrFalse",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of two identical variables with isless(varName,varName) always evaluates to false.",
                "disable": false
            },
            {
                "real_name": "comparisonOfBoolWithBoolError",
                "display_name": "comparisonOfBoolWithBoolError",
                "severity": "info",
                "category": "convention",
                "rule_title": "comparisonOfBoolWithBoolError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of a variable having boolean value using relational (<, >, <= or >=) operator.",
                "disable": false
            },
            {
                "real_name": "comparisonOfBoolWithInvalidComparator",
                "display_name": "comparisonOfBoolWithInvalidComparator",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "comparisonOfBoolWithInvalidComparator",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of a boolean value using relational operator (<, >, <= or >=).",
                "disable": false
            },
            {
                "real_name": "comparisonOfFuncReturningBoolError",
                "display_name": "comparisonOfFuncReturningBoolError",
                "severity": "info",
                "category": "convention",
                "rule_title": "comparisonOfFuncReturningBoolError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of a function returning boolean value using relational (<, >, <= or >=) operator.",
                "disable": false
            },
            {
                "real_name": "comparisonOfTwoFuncsReturningBoolError",
                "display_name": "comparisonOfTwoFuncsReturningBoolError",
                "severity": "info",
                "category": "convention",
                "rule_title": "comparisonOfTwoFuncsReturningBoolError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator.",
                "disable": false
            },
            {
                "real_name": "ConfigurationNotChecked",
                "display_name": "ConfigurationNotChecked",
                "severity": "info",
                "category": "convention",
                "rule_title": "ConfigurationNotChecked",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Skipping configuration 'X' since the value of 'X' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.",
                "disable": false
            },
            {
                "real_name": "constStatement",
                "display_name": "constStatement",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "constStatement",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Redundant code: Found a statement that begins with type constant.",
                "disable": false
            },
            {
                "real_name": "constVariable",
                "display_name": "constVariable",
                "severity": "info",
                "category": "convention",
                "rule_title": "constVariable",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Variable 'x' can be declared with const",
                "disable": false
            },
            {
                "real_name": "containerOutOfBounds",
                "display_name": "containerOutOfBounds",
                "severity": "error",
                "category": "correctness",
                "rule_title": "containerOutOfBounds",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Out of bounds access in expression 'container[x]'",
                "disable": false
            },
            {
                "real_name": "copyCtorAndEqOperator",
                "display_name": "copyCtorAndEqOperator",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "copyCtorAndEqOperator",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The class 'class' has 'operator=' but lack of 'copy constructor'.",
                "disable": false
            },
            {
                "real_name": "copyCtorPointerCopying",
                "display_name": "copyCtorPointerCopying",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "copyCtorPointerCopying",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Value of pointer 'var', which points to allocated memory, is copied in copy constructor instead of allocating new memory.",
                "disable": false
            },
            {
                "real_name": "coutCerrMisusage",
                "display_name": "coutCerrMisusage",
                "severity": "error",
                "category": "correctness",
                "rule_title": "coutCerrMisusage",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Invalid usage of output stream: '<< std::cout'.",
                "disable": false
            },
            {
                "real_name": "cstyleCast",
                "display_name": "cstyleCast",
                "severity": "info",
                "category": "convention",
                "rule_title": "cstyleCast",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "C-style pointer casting",
                "disable": false
            },
            {
                "real_name": "danglingLifetime",
                "display_name": "danglingLifetime",
                "severity": "error",
                "category": "correctness",
                "rule_title": "danglingLifetime",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Non-local variable 'x' will use object.",
                "disable": false
            },
            {
                "real_name": "danglingReference",
                "display_name": "danglingReference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "danglingReference",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Non-local reference variable 'x' to local variable 'y'",
                "disable": false
            },
            {
                "real_name": "danglingTemporaryLifetime",
                "display_name": "danglingTemporaryLifetime",
                "severity": "error",
                "category": "correctness",
                "rule_title": "danglingTemporaryLifetime",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using object to temporary.",
                "disable": false
            },
            {
                "real_name": "danglingTempReference",
                "display_name": "danglingTempReference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "danglingTempReference",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using reference to dangling temporary.",
                "disable": false
            },
            {
                "real_name": "deallocDealloc",
                "display_name": "deallocDealloc",
                "severity": "error",
                "category": "correctness",
                "rule_title": "deallocDealloc",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Deallocating a deallocated pointer: varname",
                "disable": false
            },
            {
                "real_name": "deallocret",
                "display_name": "deallocret",
                "severity": "error",
                "category": "correctness",
                "rule_title": "deallocret",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Returning/dereferencing 'p' after it is deallocated / released",
                "disable": false
            },
            {
                "real_name": "deallocuse",
                "display_name": "deallocuse",
                "severity": "error",
                "category": "correctness",
                "rule_title": "deallocuse",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Dereferencing 'varname' after it is deallocated / released",
                "disable": false
            },
            {
                "real_name": "derefInvalidIterator",
                "display_name": "derefInvalidIterator",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "derefInvalidIterator",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Possible dereference of an invalid iterator: i",
                "disable": false
            },
            {
                "real_name": "divideSizeof",
                "display_name": "divideSizeof",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "divideSizeof",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Division of result of sizeof() on pointer type.",
                "disable": false
            },
            {
                "real_name": "doubleFree",
                "display_name": "doubleFree",
                "severity": "error",
                "category": "correctness",
                "rule_title": "doubleFree",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Memory pointed to by 'varname' is freed twice.",
                "disable": false
            },
            {
                "real_name": "duplicateAssignExpression",
                "display_name": "duplicateAssignExpression",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateAssignExpression",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same expression used in consecutive assignments of 'x' and 'x'.",
                "disable": false
            },
            {
                "real_name": "duplicateBranch",
                "display_name": "duplicateBranch",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateBranch",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Found duplicate branches for 'if' and 'else'.",
                "disable": false
            },
            {
                "real_name": "duplicateBreak",
                "display_name": "duplicateBreak",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateBreak",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Consecutive return, break, continue, goto or throw statements are unnecessary.",
                "disable": false
            },
            {
                "real_name": "duplicateCondition",
                "display_name": "duplicateCondition",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateCondition",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The if condition is the same as the previous if condition",
                "disable": false
            },
            {
                "real_name": "duplicateConditionalAssign",
                "display_name": "duplicateConditionalAssign",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateConditionalAssign",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Duplicate expression for the condition and assignment.",
                "disable": false
            },
            {
                "real_name": "duplicateExpression",
                "display_name": "duplicateExpression",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateExpression",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same expression on both sides of '&&'.",
                "disable": false
            },
            {
                "real_name": "duplicateExpressionTernary",
                "display_name": "duplicateExpressionTernary",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateExpressionTernary",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same expression in both branches of ternary operator.",
                "disable": false
            },
            {
                "real_name": "duplicateValueTernary",
                "display_name": "duplicateValueTernary",
                "severity": "info",
                "category": "convention",
                "rule_title": "duplicateValueTernary",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same value in both branches of ternary operator.",
                "disable": false
            },
            {
                "real_name": "duplInheritedMember",
                "display_name": "duplInheritedMember",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "duplInheritedMember",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The class 'class' defines member variable with name 'variable' also defined in its parent class 'class'.",
                "disable": false
            },
            {
                "real_name": "eraseDereference",
                "display_name": "eraseDereference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "eraseDereference",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Invalid iterator 'iter' used.",
                "disable": false
            },
            {
                "real_name": "exceptDeallocThrow",
                "display_name": "exceptDeallocThrow",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "exceptDeallocThrow",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Exception thrown in invalid state, 'p' points at deallocated memory.",
                "disable": false
            },
            {
                "real_name": "exceptRethrowCopy",
                "display_name": "exceptRethrowCopy",
                "severity": "info",
                "category": "convention",
                "rule_title": "exceptRethrowCopy",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Throwing a copy of the caught exception instead of rethrowing the original exception.",
                "disable": false
            },
            {
                "real_name": "exceptThrowInDestructor",
                "display_name": "exceptThrowInDestructor",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "exceptThrowInDestructor",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Class Class is not safe, destructor throws exception",
                "disable": false
            },
            {
                "real_name": "fflushOnInputStream",
                "display_name": "fflushOnInputStream",
                "severity": "info",
                "category": "convention",
                "rule_title": "fflushOnInputStream",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems.",
                "disable": false
            },
            {
                "real_name": "floatConversionOverflow",
                "display_name": "floatConversionOverflow",
                "severity": "error",
                "category": "correctness",
                "rule_title": "floatConversionOverflow",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Undefined behaviour: float (1e+100) to integer conversion overflow.",
                "disable": false
            },
            {
                "real_name": "funcArgNamesDifferent",
                "display_name": "funcArgNamesDifferent",
                "severity": "info",
                "category": "convention",
                "rule_title": "funcArgNamesDifferent",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Function 'function' argument 2 names different: declaration 'A' definition 'B'.",
                "disable": false
            },
            {
                "real_name": "funcArgOrderDifferent",
                "display_name": "funcArgOrderDifferent",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "funcArgOrderDifferent",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Function 'function' argument order different: declaration '' definition ''",
                "disable": false
            },
            {
                "real_name": "functionConst",
                "display_name": "functionConst",
                "severity": "info",
                "category": "convention",
                "rule_title": "functionConst",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Technically the member function 'class::function' can be const.",
                "disable": false
            },
            {
                "real_name": "functionStatic",
                "display_name": "functionStatic",
                "severity": "info",
                "category": "convention",
                "rule_title": "functionStatic",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Technically the member function 'class::function' can be static (but you may consider moving to unnamed namespace).",
                "disable": false
            },
            {
                "real_name": "globalLockGuard",
                "display_name": "globalLockGuard",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "globalLockGuard",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.",
                "disable": false
            },
            {
                "real_name": "identicalConditionAfterEarlyExit",
                "display_name": "identicalConditionAfterEarlyExit",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "identicalConditionAfterEarlyExit",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Identical condition 'x', second condition is always false",
                "disable": false
            },
            {
                "real_name": "identicalInnerCondition",
                "display_name": "identicalInnerCondition",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "identicalInnerCondition",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Identical inner 'if' condition is always true.",
                "disable": false
            },
            {
                "real_name": "ignoredReturnValue",
                "display_name": "ignoredReturnValue",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "ignoredReturnValue",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Return value of function malloc() is not used.",
                "disable": false
            },
            {
                "real_name": "incompatibleFileOpen",
                "display_name": "incompatibleFileOpen",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "incompatibleFileOpen",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The file 'tmp' is opened for read and write access at the same time on different streams",
                "disable": false
            },
            {
                "real_name": "incompleteArrayFill",
                "display_name": "incompleteArrayFill",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "incompleteArrayFill",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Array 'buffer' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*buffer)'?",
                "disable": false
            },
            {
                "real_name": "incorrectCharBooleanError",
                "display_name": "incorrectCharBooleanError",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "incorrectCharBooleanError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Conversion of char literal 'x' to bool always evaluates to true.",
                "disable": false
            },
            {
                "real_name": "incorrectLogicOperator",
                "display_name": "incorrectLogicOperator",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "incorrectLogicOperator",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Logical disjunction always evaluates to true: foo > 3 && foo < 4.",
                "disable": false
            },
            {
                "real_name": "incorrectStringBooleanError",
                "display_name": "incorrectStringBooleanError",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "incorrectStringBooleanError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Conversion of string literal \"Hello World\" to bool always evaluates to true.",
                "disable": false
            },
            {
                "real_name": "incorrectStringCompare",
                "display_name": "incorrectStringCompare",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "incorrectStringCompare",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "String literal \"Hello World\" doesn't match length argument for substr().",
                "disable": false
            },
            {
                "real_name": "incrementboolean",
                "display_name": "incrementboolean",
                "severity": "info",
                "category": "convention",
                "rule_title": "incrementboolean",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead.",
                "disable": false
            },
            {
                "real_name": "initializerList",
                "display_name": "initializerList",
                "severity": "info",
                "category": "convention",
                "rule_title": "initializerList",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Member variable 'class::variable' is in the wrong place in the initializer list.",
                "disable": false
            },
            {
                "real_name": "integerOverflow",
                "display_name": "integerOverflow",
                "severity": "error",
                "category": "correctness",
                "rule_title": "integerOverflow",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Signed integer overflow for expression ''.",
                "disable": false
            },
            {
                "real_name": "invalidContainer",
                "display_name": "invalidContainer",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidContainer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using object that may be invalid.",
                "disable": false
            },
            {
                "real_name": "invalidContainerLoop",
                "display_name": "invalidContainerLoop",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidContainerLoop",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Calling 'erase' while iterating the container is invalid.",
                "disable": false
            },
            {
                "real_name": "invalidFree",
                "display_name": "invalidFree",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidFree",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Mismatching address is freed. The address you get from malloc() must be freed without offset.",
                "disable": false
            },
            {
                "real_name": "invalidFunctionArg",
                "display_name": "invalidFunctionArg",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidFunctionArg",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Invalid func_name() argument nr 1. The value is 0 or 1 (boolean) but the valid values are '1:4'.",
                "disable": false
            },
            {
                "real_name": "invalidFunctionArgBool",
                "display_name": "invalidFunctionArgBool",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidFunctionArgBool",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Invalid func_name() argument nr 1. A non-boolean value is required.",
                "disable": false
            },
            {
                "real_name": "invalidFunctionArgStr",
                "display_name": "invalidFunctionArgStr",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidFunctionArgStr",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Invalid func_name() argument nr 1. A nul-terminated string is required.",
                "disable": false
            },
            {
                "real_name": "invalidIterator1",
                "display_name": "invalidIterator1",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidIterator1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Invalid iterator: iterator",
                "disable": false
            },
            {
                "real_name": "invalidLengthModifierError",
                "display_name": "invalidLengthModifierError",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidLengthModifierError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.",
                "disable": false
            },
            {
                "real_name": "invalidLifetime",
                "display_name": "invalidLifetime",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidLifetime",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using object that is out of scope.",
                "disable": false
            },
            {
                "real_name": "invalidPointerCast",
                "display_name": "invalidPointerCast",
                "severity": "info",
                "category": "convention",
                "rule_title": "invalidPointerCast",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Casting between float * and double * which have an incompatible binary data representation.",
                "disable": false
            },
            {
                "real_name": "invalidPrintfArgType_float",
                "display_name": "invalidPrintfArgType_float",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidPrintfArgType_float",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%f in format string (no. 1) requires 'double' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidPrintfArgType_n",
                "display_name": "invalidPrintfArgType_n",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidPrintfArgType_n",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%n in format string (no. 1) requires 'int *' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidPrintfArgType_p",
                "display_name": "invalidPrintfArgType_p",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidPrintfArgType_p",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%p in format string (no. 1) requires an address but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidPrintfArgType_s",
                "display_name": "invalidPrintfArgType_s",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidPrintfArgType_s",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%s in format string (no. 1) requires 'char *' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidPrintfArgType_sint",
                "display_name": "invalidPrintfArgType_sint",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidPrintfArgType_sint",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%i in format string (no. 1) requires 'int' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidPrintfArgType_uint",
                "display_name": "invalidPrintfArgType_uint",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidPrintfArgType_uint",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%u in format string (no. 1) requires 'unsigned int' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidscanf",
                "display_name": "invalidscanf",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidscanf",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "scanf() without field width limits can crash with huge input data.",
                "disable": false
            },
            {
                "real_name": "invalidScanfArgType_float",
                "display_name": "invalidScanfArgType_float",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidScanfArgType_float",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%f in format string (no. 1) requires 'float *' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidScanfArgType_int",
                "display_name": "invalidScanfArgType_int",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidScanfArgType_int",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%d in format string (no. 1) requires 'int *' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidScanfArgType_s",
                "display_name": "invalidScanfArgType_s",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidScanfArgType_s",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "%s in format string (no. 1) requires a 'char *' but the argument type is Unknown.",
                "disable": false
            },
            {
                "real_name": "invalidScanfFormatWidth",
                "display_name": "invalidScanfFormatWidth",
                "severity": "error",
                "category": "correctness",
                "rule_title": "invalidScanfFormatWidth",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Width 5 given in format string (no. 10) is larger than destination buffer '[0]', use %-1s to prevent overflowing it.",
                "disable": false
            },
            {
                "real_name": "invalidScanfFormatWidth_smaller",
                "display_name": "invalidScanfFormatWidth_smaller",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidScanfFormatWidth_smaller",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Width -1 given in format string (no. 99) is smaller than destination buffer '[0]'.",
                "disable": false
            },
            {
                "real_name": "invalidTestForOverflow",
                "display_name": "invalidTestForOverflow",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "invalidTestForOverflow",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Invalid test for overflow 'x + c < x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.",
                "disable": false
            },
            {
                "real_name": "IOWithoutPositioning",
                "display_name": "IOWithoutPositioning",
                "severity": "error",
                "category": "correctness",
                "rule_title": "IOWithoutPositioning",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.",
                "disable": false
            },
            {
                "real_name": "iterators1",
                "display_name": "iterators1",
                "severity": "error",
                "category": "correctness",
                "rule_title": "iterators1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same iterator is used with different containers 'container1' and 'container2'.",
                "disable": false
            },
            {
                "real_name": "iterators2",
                "display_name": "iterators2",
                "severity": "error",
                "category": "correctness",
                "rule_title": "iterators2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same iterator is used with different containers 'container0' and 'container1'.",
                "disable": false
            },
            {
                "real_name": "iterators3",
                "display_name": "iterators3",
                "severity": "error",
                "category": "correctness",
                "rule_title": "iterators3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same iterator is used with containers 'container' that are defined in different scopes.",
                "disable": false
            },
            {
                "real_name": "knownArgument",
                "display_name": "knownArgument",
                "severity": "info",
                "category": "convention",
                "rule_title": "knownArgument",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Argument 'x-x' to function 'func' is always 0. It does not matter what value 'x' has.",
                "disable": false
            },
            {
                "real_name": "knownArgumentHiddenVariableExpression",
                "display_name": "knownArgumentHiddenVariableExpression",
                "severity": "info",
                "category": "convention",
                "rule_title": "knownArgumentHiddenVariableExpression",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Argument 'x*0' to function 'func' is always 0. Constant literal calculation disable/hide variable expression 'x'.",
                "disable": false
            },
            {
                "real_name": "knownConditionTrueFalse",
                "display_name": "knownConditionTrueFalse",
                "severity": "info",
                "category": "convention",
                "rule_title": "knownConditionTrueFalse",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Condition 'x' is always false",
                "disable": false
            },
            {
                "real_name": "knownEmptyContainer",
                "display_name": "knownEmptyContainer",
                "severity": "info",
                "category": "convention",
                "rule_title": "knownEmptyContainer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Iterating over container 'var' that is always empty.",
                "disable": false
            },
            {
                "real_name": "leakNoVarFunctionCall",
                "display_name": "leakNoVarFunctionCall",
                "severity": "error",
                "category": "correctness",
                "rule_title": "leakNoVarFunctionCall",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Allocation with funcName, funcName doesn't release it.",
                "disable": false
            },
            {
                "real_name": "leakReturnValNotUsed",
                "display_name": "leakReturnValNotUsed",
                "severity": "error",
                "category": "correctness",
                "rule_title": "leakReturnValNotUsed",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Return value of allocation function 'funcName' is not stored.",
                "disable": false
            },
            {
                "real_name": "leakUnsafeArgAlloc",
                "display_name": "leakUnsafeArgAlloc",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "leakUnsafeArgAlloc",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unsafe allocation. If funcName() throws, memory could be leaked. Use make_shared<int>() instead.",
                "disable": false
            },
            {
                "real_name": "literalWithCharPtrCompare",
                "display_name": "literalWithCharPtrCompare",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "literalWithCharPtrCompare",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "String literal compared with variable 'foo'. Did you intend to use strcmp() instead?",
                "disable": false
            },
            {
                "real_name": "localMutex",
                "display_name": "localMutex",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "localMutex",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The lock is ineffective because the mutex is locked at the same scope as the mutex itself.",
                "disable": false
            },
            {
                "real_name": "mallocOnClassError",
                "display_name": "mallocOnClassError",
                "severity": "error",
                "category": "correctness",
                "rule_title": "mallocOnClassError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Memory for class instance allocated with malloc(), but class contains a std::string.",
                "disable": false
            },
            {
                "real_name": "mallocOnClassWarning",
                "display_name": "mallocOnClassWarning",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "mallocOnClassWarning",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Memory for class instance allocated with malloc(), but class provides constructors.",
                "disable": false
            },
            {
                "real_name": "memleak",
                "display_name": "memleak",
                "severity": "error",
                "category": "correctness",
                "rule_title": "memleak",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Memory leak: varname",
                "disable": false
            },
            {
                "real_name": "memleakOnRealloc",
                "display_name": "memleakOnRealloc",
                "severity": "error",
                "category": "correctness",
                "rule_title": "memleakOnRealloc",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Common realloc mistake: 'varname' nulled but not freed upon failure",
                "disable": false
            },
            {
                "real_name": "memsetClass",
                "display_name": "memsetClass",
                "severity": "error",
                "category": "correctness",
                "rule_title": "memsetClass",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using 'memfunc' on class that contains a classname.",
                "disable": false
            },
            {
                "real_name": "memsetClassFloat",
                "display_name": "memsetClassFloat",
                "severity": "info",
                "category": "convention",
                "rule_title": "memsetClassFloat",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using memset() on class which contains a floating point number.",
                "disable": false
            },
            {
                "real_name": "memsetClassReference",
                "display_name": "memsetClassReference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "memsetClassReference",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using 'memfunc' on class that contains a reference.",
                "disable": false
            },
            {
                "real_name": "memsetFloat",
                "display_name": "memsetFloat",
                "severity": "info",
                "category": "convention",
                "rule_title": "memsetFloat",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The 2nd memset() argument 'varname' is a float, its representation is implementation defined.",
                "disable": false
            },
            {
                "real_name": "memsetValueOutOfRange",
                "display_name": "memsetValueOutOfRange",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "memsetValueOutOfRange",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The 2nd memset() argument 'varname' doesn't fit into an 'unsigned char'.",
                "disable": false
            },
            {
                "real_name": "memsetZeroBytes",
                "display_name": "memsetZeroBytes",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "memsetZeroBytes",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "memset() called to fill 0 bytes.",
                "disable": false
            },
            {
                "real_name": "mismatchAllocDealloc",
                "display_name": "mismatchAllocDealloc",
                "severity": "error",
                "category": "correctness",
                "rule_title": "mismatchAllocDealloc",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Mismatching allocation and deallocation: varname",
                "disable": false
            },
            {
                "real_name": "mismatchingBitAnd",
                "display_name": "mismatchingBitAnd",
                "severity": "info",
                "category": "convention",
                "rule_title": "mismatchingBitAnd",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).",
                "disable": false
            },
            {
                "real_name": "mismatchingContainerExpression",
                "display_name": "mismatchingContainerExpression",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "mismatchingContainerExpression",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Iterators to containers from different expressions 'v1' and 'v2' are used together.",
                "disable": false
            },
            {
                "real_name": "mismatchingContainerIterator",
                "display_name": "mismatchingContainerIterator",
                "severity": "error",
                "category": "correctness",
                "rule_title": "mismatchingContainerIterator",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Iterator 'it' from different container 'v1' are used together.",
                "disable": false
            },
            {
                "real_name": "mismatchingContainers",
                "display_name": "mismatchingContainers",
                "severity": "error",
                "category": "correctness",
                "rule_title": "mismatchingContainers",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Iterators of different containers 'v1' and 'v2' are used together.",
                "disable": false
            },
            {
                "real_name": "mismatchSize",
                "display_name": "mismatchSize",
                "severity": "error",
                "category": "correctness",
                "rule_title": "mismatchSize",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The allocated size sz is not a multiple of the underlying type's size.",
                "disable": false
            },
            {
                "real_name": "missingInclude",
                "display_name": "missingInclude",
                "severity": "info",
                "category": "convention",
                "rule_title": "missingInclude",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Include file: \"\" not found.",
                "disable": false
            },
            {
                "real_name": "missingIncludeSystem",
                "display_name": "missingIncludeSystem",
                "severity": "info",
                "category": "convention",
                "rule_title": "missingIncludeSystem",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Include file: <> not found. Please note: Cppcheck does not need standard library headers to get proper results.",
                "disable": false
            },
            {
                "real_name": "missingOverride",
                "display_name": "missingOverride",
                "severity": "info",
                "category": "convention",
                "rule_title": "missingOverride",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The function '' overrides a function in a base class but is not marked with a 'override' specifier.",
                "disable": false
            },
            {
                "real_name": "missingReturn",
                "display_name": "missingReturn",
                "severity": "error",
                "category": "correctness",
                "rule_title": "missingReturn",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Found a exit path from function with non-void return type that has missing return statement",
                "disable": false
            },
            {
                "real_name": "moduloAlwaysTrueFalse",
                "display_name": "moduloAlwaysTrueFalse",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "moduloAlwaysTrueFalse",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of modulo result is predetermined, because it is always less than 1.",
                "disable": false
            },
            {
                "real_name": "moduloofone",
                "display_name": "moduloofone",
                "severity": "info",
                "category": "convention",
                "rule_title": "moduloofone",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Modulo of one is always equal to zero",
                "disable": false
            },
            {
                "real_name": "multiCondition",
                "display_name": "multiCondition",
                "severity": "info",
                "category": "convention",
                "rule_title": "multiCondition",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Expression is always false because 'else if' condition matches previous condition at line 1.",
                "disable": false
            },
            {
                "real_name": "multiplySizeof",
                "display_name": "multiplySizeof",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "multiplySizeof",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Multiplying sizeof() with sizeof() indicates a logic error.",
                "disable": false
            },
            {
                "real_name": "nanInArithmeticExpression",
                "display_name": "nanInArithmeticExpression",
                "severity": "info",
                "category": "convention",
                "rule_title": "nanInArithmeticExpression",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using NaN/Inf in a computation.",
                "disable": false
            },
            {
                "real_name": "negativeContainerIndex",
                "display_name": "negativeContainerIndex",
                "severity": "error",
                "category": "correctness",
                "rule_title": "negativeContainerIndex",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Array index -1 is out of bounds.",
                "disable": false
            },
            {
                "real_name": "negativeIndex",
                "display_name": "negativeIndex",
                "severity": "error",
                "category": "correctness",
                "rule_title": "negativeIndex",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Negative array index",
                "disable": false
            },
            {
                "real_name": "noConstructor",
                "display_name": "noConstructor",
                "severity": "info",
                "category": "convention",
                "rule_title": "noConstructor",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The class 'classname' does not have a constructor although it has private member variables.",
                "disable": false
            },
            {
                "real_name": "noCopyConstructor",
                "display_name": "noCopyConstructor",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "noCopyConstructor",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Class 'class' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s).",
                "disable": false
            },
            {
                "real_name": "noDestructor",
                "display_name": "noDestructor",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "noDestructor",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Class 'class' does not have a destructor which is recommended since it has dynamic memory/resource allocation(s).",
                "disable": false
            },
            {
                "real_name": "noExplicitConstructor",
                "display_name": "noExplicitConstructor",
                "severity": "info",
                "category": "convention",
                "rule_title": "noExplicitConstructor",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Class 'classname' has a constructor with 1 argument that is not explicit.",
                "disable": false
            },
            {
                "real_name": "noOperatorEq",
                "display_name": "noOperatorEq",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "noOperatorEq",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Class 'class' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s).",
                "disable": false
            },
            {
                "real_name": "nullPointer",
                "display_name": "nullPointer",
                "severity": "error",
                "category": "correctness",
                "rule_title": "nullPointer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Null pointer dereference",
                "disable": false
            },
            {
                "real_name": "nullPointerArithmetic",
                "display_name": "nullPointerArithmetic",
                "severity": "error",
                "category": "correctness",
                "rule_title": "nullPointerArithmetic",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Pointer arithmetic with NULL pointer.",
                "disable": false
            },
            {
                "real_name": "nullPointerArithmeticRedundantCheck",
                "display_name": "nullPointerArithmeticRedundantCheck",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "nullPointerArithmeticRedundantCheck",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Either the condition is redundant or there is pointer arithmetic with NULL pointer.",
                "disable": false
            },
            {
                "real_name": "nullPointerDefaultArg",
                "display_name": "nullPointerDefaultArg",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "nullPointerDefaultArg",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Possible null pointer dereference if the default parameter value is used: pointer",
                "disable": false
            },
            {
                "real_name": "nullPointerRedundantCheck",
                "display_name": "nullPointerRedundantCheck",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "nullPointerRedundantCheck",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Either the condition is redundant or there is possible null pointer dereference: pointer.",
                "disable": false
            },
            {
                "real_name": "objectIndex",
                "display_name": "objectIndex",
                "severity": "error",
                "category": "correctness",
                "rule_title": "objectIndex",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The address of local variable '' is accessed at non-zero index.",
                "disable": false
            },
            {
                "real_name": "operatorEqMissingReturnStatement",
                "display_name": "operatorEqMissingReturnStatement",
                "severity": "error",
                "category": "correctness",
                "rule_title": "operatorEqMissingReturnStatement",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "No 'return' statement in non-void function causes undefined behavior.",
                "disable": false
            },
            {
                "real_name": "operatorEqRetRefThis",
                "display_name": "operatorEqRetRefThis",
                "severity": "info",
                "category": "convention",
                "rule_title": "operatorEqRetRefThis",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'operator=' should return reference to 'this' instance.",
                "disable": false
            },
            {
                "real_name": "operatorEqShouldBeLeftUnimplemented",
                "display_name": "operatorEqShouldBeLeftUnimplemented",
                "severity": "info",
                "category": "convention",
                "rule_title": "operatorEqShouldBeLeftUnimplemented",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'operator=' should either return reference to 'this' instance or be declared private and left unimplemented.",
                "disable": false
            },
            {
                "real_name": "operatorEqToSelf",
                "display_name": "operatorEqToSelf",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "operatorEqToSelf",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'operator=' should check for assignment to self to avoid problems with dynamic memory.",
                "disable": false
            },
            {
                "real_name": "operatorEqVarError",
                "display_name": "operatorEqVarError",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "operatorEqVarError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Member variable 'classname::' is not assigned a value in 'classname::operator='.",
                "disable": false
            },
            {
                "real_name": "oppositeExpression",
                "display_name": "oppositeExpression",
                "severity": "info",
                "category": "convention",
                "rule_title": "oppositeExpression",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Opposite expression on both sides of '&&'.",
                "disable": false
            },
            {
                "real_name": "oppositeInnerCondition",
                "display_name": "oppositeInnerCondition",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "oppositeInnerCondition",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Opposite inner 'if' condition leads to a dead code block.",
                "disable": false
            },
            {
                "real_name": "overlappingStrcmp",
                "display_name": "overlappingStrcmp",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "overlappingStrcmp",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The expression 'strcmp(x,\"def\") != 0' is suspicious. It overlaps 'strcmp(x,\"abc\") == 0'.",
                "disable": false
            },
            {
                "real_name": "overlappingWriteFunction",
                "display_name": "overlappingWriteFunction",
                "severity": "error",
                "category": "correctness",
                "rule_title": "overlappingWriteFunction",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Overlapping read/write in () is undefined behavior",
                "disable": false
            },
            {
                "real_name": "overlappingWriteUnion",
                "display_name": "overlappingWriteUnion",
                "severity": "error",
                "category": "correctness",
                "rule_title": "overlappingWriteUnion",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Overlapping read/write of union is undefined behavior",
                "disable": false
            },
            {
                "real_name": "passedByValue",
                "display_name": "passedByValue",
                "severity": "info",
                "category": "convention",
                "rule_title": "passedByValue",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Function parameter 'parametername' should be passed by const reference.",
                "disable": false
            },
            {
                "real_name": "pointerAdditionResultNotNull",
                "display_name": "pointerAdditionResultNotNull",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "pointerAdditionResultNotNull",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison is wrong. Result of 'ptr+1' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.",
                "disable": false
            },
            {
                "real_name": "pointerArithBool",
                "display_name": "pointerArithBool",
                "severity": "error",
                "category": "correctness",
                "rule_title": "pointerArithBool",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour.",
                "disable": false
            },
            {
                "real_name": "pointerLessThanZero",
                "display_name": "pointerLessThanZero",
                "severity": "info",
                "category": "convention",
                "rule_title": "pointerLessThanZero",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "A pointer can not be negative so it is either pointless or an error to check if it is.",
                "disable": false
            },
            {
                "real_name": "pointerOutOfBounds",
                "display_name": "pointerOutOfBounds",
                "severity": "info",
                "category": "convention",
                "rule_title": "pointerOutOfBounds",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Pointer arithmetic overflow.",
                "disable": false
            },
            {
                "real_name": "pointerPositive",
                "display_name": "pointerPositive",
                "severity": "info",
                "category": "convention",
                "rule_title": "pointerPositive",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "A pointer can not be negative so it is either pointless or an error to check if it is not.",
                "disable": false
            },
            {
                "real_name": "pointerSize",
                "display_name": "pointerSize",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "pointerSize",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Size of pointer 'varname' used instead of size of its data.",
                "disable": false
            },
            {
                "real_name": "postfixOperator",
                "display_name": "postfixOperator",
                "severity": "info",
                "category": "convention",
                "rule_title": "postfixOperator",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Prefer prefix ++/-- operators for non-primitive types.",
                "disable": false
            },
            {
                "real_name": "preprocessorErrorDirective",
                "display_name": "preprocessorErrorDirective",
                "severity": "error",
                "category": "correctness",
                "rule_title": "preprocessorErrorDirective",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "#error message",
                "disable": false
            },
            {
                "real_name": "publicAllocationError",
                "display_name": "publicAllocationError",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "publicAllocationError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Possible leak in public function. The pointer 'varname' is not deallocated before it is allocated.",
                "disable": false
            },
            {
                "real_name": "pureVirtualCall",
                "display_name": "pureVirtualCall",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "pureVirtualCall",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Call of pure virtual function 'f' in constructor.",
                "disable": false
            },
            {
                "real_name": "purgedConfiguration",
                "display_name": "purgedConfiguration",
                "severity": "info",
                "category": "convention",
                "rule_title": "purgedConfiguration",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The configuration '' was not checked because its code equals another one.",
                "disable": false
            },
            {
                "real_name": "raceAfterInterlockedDecrement",
                "display_name": "raceAfterInterlockedDecrement",
                "severity": "error",
                "category": "correctness",
                "rule_title": "raceAfterInterlockedDecrement",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.",
                "disable": false
            },
            {
                "real_name": "reademptycontainer",
                "display_name": "reademptycontainer",
                "severity": "info",
                "category": "convention",
                "rule_title": "reademptycontainer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Reading from empty STL container 'var'",
                "disable": false
            },
            {
                "real_name": "readWriteOnlyFile",
                "display_name": "readWriteOnlyFile",
                "severity": "error",
                "category": "correctness",
                "rule_title": "readWriteOnlyFile",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Read operation on a file that was opened only for writing.",
                "disable": false
            },
            {
                "real_name": "redundantAssignInSwitch",
                "display_name": "redundantAssignInSwitch",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantAssignInSwitch",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Variable 'var' is reassigned a value before the old one has been used. 'break;' missing?",
                "disable": false
            },
            {
                "real_name": "redundantAssignment",
                "display_name": "redundantAssignment",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantAssignment",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Variable 'var' is reassigned a value before the old one has been used.",
                "disable": false
            },
            {
                "real_name": "redundantBitwiseOperationInSwitch",
                "display_name": "redundantBitwiseOperationInSwitch",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantBitwiseOperationInSwitch",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Redundant bitwise operation on 'varname' in 'switch' statement. 'break;' missing?",
                "disable": false
            },
            {
                "real_name": "redundantCondition",
                "display_name": "redundantCondition",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantCondition",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Redundant condition: If x > 11 the condition x > 10 is always true.",
                "disable": false
            },
            {
                "real_name": "redundantCopy",
                "display_name": "redundantCopy",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantCopy",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Buffer 'var' is being written before its old content has been used.",
                "disable": false
            },
            {
                "real_name": "redundantCopyInSwitch",
                "display_name": "redundantCopyInSwitch",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantCopyInSwitch",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Buffer 'var' is being written before its old content has been used. 'break;' missing?",
                "disable": false
            },
            {
                "real_name": "redundantCopyLocalConst",
                "display_name": "redundantCopyLocalConst",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantCopyLocalConst",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Use const reference for 'varname' to avoid unnecessary data copying.",
                "disable": false
            },
            {
                "real_name": "redundantIfRemove",
                "display_name": "redundantIfRemove",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantIfRemove",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Redundant checking of STL container element existence before removing it.",
                "disable": false
            },
            {
                "real_name": "redundantInitialization",
                "display_name": "redundantInitialization",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantInitialization",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Redundant initialization for 'var'. The initialized value is overwritten before it is read.",
                "disable": false
            },
            {
                "real_name": "redundantPointerOp",
                "display_name": "redundantPointerOp",
                "severity": "info",
                "category": "convention",
                "rule_title": "redundantPointerOp",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Redundant pointer operation on 'varname' - it's already a pointer.",
                "disable": false
            },
            {
                "real_name": "resourceLeak",
                "display_name": "resourceLeak",
                "severity": "error",
                "category": "correctness",
                "rule_title": "resourceLeak",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Resource leak: varname",
                "disable": false
            },
            {
                "real_name": "rethrowNoCurrentException",
                "display_name": "rethrowNoCurrentException",
                "severity": "error",
                "category": "correctness",
                "rule_title": "rethrowNoCurrentException",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Rethrowing current exception with 'throw;', it seems there is no current exception to rethrow. If there is no current exception this calls std::terminate(). More: https://isocpp.org/wiki/faq/exceptions#throw-without-an-object",
                "disable": false
            },
            {
                "real_name": "returnAddressOfAutoVariable",
                "display_name": "returnAddressOfAutoVariable",
                "severity": "error",
                "category": "correctness",
                "rule_title": "returnAddressOfAutoVariable",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Address of an auto-variable returned.",
                "disable": false
            },
            {
                "real_name": "returnAddressOfFunctionParameter",
                "display_name": "returnAddressOfFunctionParameter",
                "severity": "error",
                "category": "correctness",
                "rule_title": "returnAddressOfFunctionParameter",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Address of function parameter 'parameter' returned.",
                "disable": false
            },
            {
                "real_name": "returnDanglingLifetime",
                "display_name": "returnDanglingLifetime",
                "severity": "error",
                "category": "correctness",
                "rule_title": "returnDanglingLifetime",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Returning object that will be invalid when returning.",
                "disable": false
            },
            {
                "real_name": "returnLocalVariable",
                "display_name": "returnLocalVariable",
                "severity": "error",
                "category": "correctness",
                "rule_title": "returnLocalVariable",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Pointer to local array variable returned.",
                "disable": false
            },
            {
                "real_name": "returnNonBoolInBooleanFunction",
                "display_name": "returnNonBoolInBooleanFunction",
                "severity": "info",
                "category": "convention",
                "rule_title": "returnNonBoolInBooleanFunction",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Non-boolean value returned from function returning bool",
                "disable": false
            },
            {
                "real_name": "returnReference",
                "display_name": "returnReference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "returnReference",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Reference to local variable returned.",
                "disable": false
            },
            {
                "real_name": "returnStdMoveLocal",
                "display_name": "returnStdMoveLocal",
                "severity": "info",
                "category": "convention",
                "rule_title": "returnStdMoveLocal",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local",
                "disable": false
            },
            {
                "real_name": "returnTempReference",
                "display_name": "returnTempReference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "returnTempReference",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Reference to temporary returned.",
                "disable": false
            },
            {
                "real_name": "sameIteratorExpression",
                "display_name": "sameIteratorExpression",
                "severity": "info",
                "category": "convention",
                "rule_title": "sameIteratorExpression",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Same iterators expression are used for algorithm.",
                "disable": false
            },
            {
                "real_name": "seekOnAppendedFile",
                "display_name": "seekOnAppendedFile",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "seekOnAppendedFile",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Repositioning operation performed on a file opened in append mode has no effect.",
                "disable": false
            },
            {
                "real_name": "selfAssignment",
                "display_name": "selfAssignment",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "selfAssignment",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Redundant assignment of 'varname' to itself.",
                "disable": false
            },
            {
                "real_name": "selfInitialization",
                "display_name": "selfInitialization",
                "severity": "error",
                "category": "correctness",
                "rule_title": "selfInitialization",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Member variable 'var' is initialized by itself.",
                "disable": false
            },
            {
                "real_name": "shadowArgument",
                "display_name": "shadowArgument",
                "severity": "info",
                "category": "convention",
                "rule_title": "shadowArgument",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Local variable 'argument' shadows outer argument",
                "disable": false
            },
            {
                "real_name": "shadowFunction",
                "display_name": "shadowFunction",
                "severity": "info",
                "category": "convention",
                "rule_title": "shadowFunction",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Local variable 'function' shadows outer function",
                "disable": false
            },
            {
                "real_name": "shadowVariable",
                "display_name": "shadowVariable",
                "severity": "info",
                "category": "convention",
                "rule_title": "shadowVariable",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Local variable 'variable' shadows outer variable",
                "disable": false
            },
            {
                "real_name": "shiftNegative",
                "display_name": "shiftNegative",
                "severity": "error",
                "category": "correctness",
                "rule_title": "shiftNegative",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Shifting by a negative value is undefined behaviour",
                "disable": false
            },
            {
                "real_name": "shiftNegativeLHS",
                "display_name": "shiftNegativeLHS",
                "severity": "info",
                "category": "convention",
                "rule_title": "shiftNegativeLHS",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Shifting a negative value is technically undefined behaviour",
                "disable": false
            },
            {
                "real_name": "shiftTooManyBits",
                "display_name": "shiftTooManyBits",
                "severity": "error",
                "category": "correctness",
                "rule_title": "shiftTooManyBits",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Shifting 32-bit value by 40 bits is undefined behaviour",
                "disable": false
            },
            {
                "real_name": "shiftTooManyBitsSigned",
                "display_name": "shiftTooManyBitsSigned",
                "severity": "error",
                "category": "correctness",
                "rule_title": "shiftTooManyBitsSigned",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Shifting signed 32-bit value by 31 bits is implementation-defined behaviour",
                "disable": false
            },
            {
                "real_name": "signConversion",
                "display_name": "signConversion",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "signConversion",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Expression 'var' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
                "disable": false
            },
            {
                "real_name": "signedCharArrayIndex",
                "display_name": "signedCharArrayIndex",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "signedCharArrayIndex",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Signed 'char' type used as array index.",
                "disable": false
            },
            {
                "real_name": "sizeofCalculation",
                "display_name": "sizeofCalculation",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "sizeofCalculation",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Found calculation inside sizeof().",
                "disable": false
            },
            {
                "real_name": "sizeofDereferencedVoidPointer",
                "display_name": "sizeofDereferencedVoidPointer",
                "severity": "info",
                "category": "convention",
                "rule_title": "sizeofDereferencedVoidPointer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'*varname' is of type 'void', the behaviour of 'sizeof(void)' is not covered by the ISO C standard.",
                "disable": false
            },
            {
                "real_name": "sizeofDivisionMemfunc",
                "display_name": "sizeofDivisionMemfunc",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "sizeofDivisionMemfunc",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Division by result of sizeof(). memset() expects a size in bytes, did you intend to multiply instead?",
                "disable": false
            },
            {
                "real_name": "sizeofFunctionCall",
                "display_name": "sizeofFunctionCall",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "sizeofFunctionCall",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Found function call inside sizeof().",
                "disable": false
            },
            {
                "real_name": "sizeofsizeof",
                "display_name": "sizeofsizeof",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "sizeofsizeof",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Calling 'sizeof' on 'sizeof'.",
                "disable": false
            },
            {
                "real_name": "sizeofVoid",
                "display_name": "sizeofVoid",
                "severity": "info",
                "category": "convention",
                "rule_title": "sizeofVoid",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Behaviour of 'sizeof(void)' is not covered by the ISO C standard.",
                "disable": false
            },
            {
                "real_name": "sizeofwithnumericparameter",
                "display_name": "sizeofwithnumericparameter",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "sizeofwithnumericparameter",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Suspicious usage of 'sizeof' with a numeric constant as parameter.",
                "disable": false
            },
            {
                "real_name": "sizeofwithsilentarraypointer",
                "display_name": "sizeofwithsilentarraypointer",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "sizeofwithsilentarraypointer",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using 'sizeof' on array given as function argument returns size of a pointer.",
                "disable": false
            },
            {
                "real_name": "sprintfOverlappingData",
                "display_name": "sprintfOverlappingData",
                "severity": "error",
                "category": "correctness",
                "rule_title": "sprintfOverlappingData",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Undefined behavior: Variable 'varname' is used as parameter and destination in s[n]printf().",
                "disable": false
            },
            {
                "real_name": "staticStringCompare",
                "display_name": "staticStringCompare",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "staticStringCompare",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unnecessary comparison of static strings.",
                "disable": false
            },
            {
                "real_name": "stlBoundaries",
                "display_name": "stlBoundaries",
                "severity": "error",
                "category": "correctness",
                "rule_title": "stlBoundaries",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Dangerous comparison using operator< on iterator.",
                "disable": false
            },
            {
                "real_name": "stlcstr",
                "display_name": "stlcstr",
                "severity": "error",
                "category": "correctness",
                "rule_title": "stlcstr",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.",
                "disable": false
            },
            {
                "real_name": "stlcstrParam",
                "display_name": "stlcstrParam",
                "severity": "info",
                "category": "convention",
                "rule_title": "stlcstrParam",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Passing the result of c_str() to a function that takes std::string as argument no. 0 is slow and redundant.",
                "disable": false
            },
            {
                "real_name": "stlcstrReturn",
                "display_name": "stlcstrReturn",
                "severity": "info",
                "category": "convention",
                "rule_title": "stlcstrReturn",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Returning the result of c_str() in a function that returns std::string is slow and redundant.",
                "disable": false
            },
            {
                "real_name": "stlcstrthrow",
                "display_name": "stlcstrthrow",
                "severity": "error",
                "category": "correctness",
                "rule_title": "stlcstrthrow",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Dangerous usage of c_str(). The value returned by c_str() is invalid after throwing exception.",
                "disable": false
            },
            {
                "real_name": "stlFindInsert",
                "display_name": "stlFindInsert",
                "severity": "info",
                "category": "convention",
                "rule_title": "stlFindInsert",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Searching before insertion is not necessary.",
                "disable": false
            },
            {
                "real_name": "stlIfFind",
                "display_name": "stlIfFind",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "stlIfFind",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Suspicious condition. The result of find() is an iterator, but it is not properly checked.",
                "disable": false
            },
            {
                "real_name": "stlIfStrFind",
                "display_name": "stlIfStrFind",
                "severity": "info",
                "category": "convention",
                "rule_title": "stlIfStrFind",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Inefficient usage of string::find() in condition; string::starts_with() could be faster.",
                "disable": false
            },
            {
                "real_name": "StlMissingComparison",
                "display_name": "StlMissingComparison",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "StlMissingComparison",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Missing bounds check for extra iterator increment in loop.",
                "disable": false
            },
            {
                "real_name": "stlOutOfBounds",
                "display_name": "stlOutOfBounds",
                "severity": "error",
                "category": "correctness",
                "rule_title": "stlOutOfBounds",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "When i==foo.size(), foo[i] is out of bounds.",
                "disable": false
            },
            {
                "real_name": "stlSize",
                "display_name": "stlSize",
                "severity": "info",
                "category": "convention",
                "rule_title": "stlSize",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Possible inefficient checking for 'list' emptiness.",
                "disable": false
            },
            {
                "real_name": "stringCompare",
                "display_name": "stringCompare",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "stringCompare",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Comparison of identical string variables.",
                "disable": false
            },
            {
                "real_name": "stringLiteralWrite",
                "display_name": "stringLiteralWrite",
                "severity": "error",
                "category": "correctness",
                "rule_title": "stringLiteralWrite",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Modifying string literal directly or indirectly is undefined behaviour.",
                "disable": false
            },
            {
                "real_name": "strPlusChar",
                "display_name": "strPlusChar",
                "severity": "error",
                "category": "correctness",
                "rule_title": "strPlusChar",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unusual pointer arithmetic. A value of type 'char' is added to a string literal.",
                "disable": false
            },
            {
                "real_name": "suspiciousCase",
                "display_name": "suspiciousCase",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "suspiciousCase",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Found suspicious case label in switch(). Operator '||' probably doesn't work as intended.",
                "disable": false
            },
            {
                "real_name": "suspiciousSemicolon",
                "display_name": "suspiciousSemicolon",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "suspiciousSemicolon",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Suspicious use of ; at the end of '' statement.",
                "disable": false
            },
            {
                "real_name": "thisSubtraction",
                "display_name": "thisSubtraction",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "thisSubtraction",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Suspicious pointer subtraction. Did you intend to write '->'?",
                "disable": false
            },
            {
                "real_name": "thisUseAfterFree",
                "display_name": "thisUseAfterFree",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "thisUseAfterFree",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using member 'x' when 'this' might be invalid",
                "disable": false
            },
            {
                "real_name": "throwInNoexceptFunction",
                "display_name": "throwInNoexceptFunction",
                "severity": "error",
                "category": "correctness",
                "rule_title": "throwInNoexceptFunction",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Exception thrown in function declared not to throw exceptions.",
                "disable": false
            },
            {
                "real_name": "toomanyconfigs",
                "display_name": "toomanyconfigs",
                "severity": "info",
                "category": "convention",
                "rule_title": "toomanyconfigs",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Too many #ifdef configurations - cppcheck only checks 12 configurations. Use --force to check all configurations. For more details, use --enable=information.",
                "disable": false
            },
            {
                "real_name": "truncLongCastAssignment",
                "display_name": "truncLongCastAssignment",
                "severity": "info",
                "category": "convention",
                "rule_title": "truncLongCastAssignment",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.",
                "disable": false
            },
            {
                "real_name": "truncLongCastReturn",
                "display_name": "truncLongCastReturn",
                "severity": "info",
                "category": "convention",
                "rule_title": "truncLongCastReturn",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information.",
                "disable": false
            },
            {
                "real_name": "unassignedVariable",
                "display_name": "unassignedVariable",
                "severity": "info",
                "category": "convention",
                "rule_title": "unassignedVariable",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Variable 'varname' is not assigned a value.",
                "disable": false
            },
            {
                "real_name": "unhandledExceptionSpecification",
                "display_name": "unhandledExceptionSpecification",
                "severity": "info",
                "category": "convention",
                "rule_title": "unhandledExceptionSpecification",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unhandled exception specification when calling function foo().",
                "disable": false
            },
            {
                "real_name": "uninitdata",
                "display_name": "uninitdata",
                "severity": "error",
                "category": "correctness",
                "rule_title": "uninitdata",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Memory is allocated but not initialized: varname",
                "disable": false
            },
            {
                "real_name": "uninitDerivedMemberVar",
                "display_name": "uninitDerivedMemberVar",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uninitDerivedMemberVar",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Member variable 'classname::varname' is not initialized in the constructor. Maybe it should be initialized directly in the class classname?",
                "disable": false
            },
            {
                "real_name": "uninitDerivedMemberVarPrivate",
                "display_name": "uninitDerivedMemberVarPrivate",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uninitDerivedMemberVarPrivate",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Member variable 'classname::varnamepriv' is not initialized in the constructor. Maybe it should be initialized directly in the class classname?",
                "disable": false
            },
            {
                "real_name": "uninitMemberVar",
                "display_name": "uninitMemberVar",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uninitMemberVar",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Member variable 'classname::varname' is not initialized in the constructor.",
                "disable": false
            },
            {
                "real_name": "uninitMemberVarPrivate",
                "display_name": "uninitMemberVarPrivate",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uninitMemberVarPrivate",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Member variable 'classname::varnamepriv' is not initialized in the constructor.",
                "disable": false
            },
            {
                "real_name": "uninitstring",
                "display_name": "uninitstring",
                "severity": "error",
                "category": "correctness",
                "rule_title": "uninitstring",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Dangerous usage of 'varname' (strncpy doesn't always null-terminate it).",
                "disable": false
            },
            {
                "real_name": "uninitStructMember",
                "display_name": "uninitStructMember",
                "severity": "error",
                "category": "correctness",
                "rule_title": "uninitStructMember",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Uninitialized struct member: a.b",
                "disable": false
            },
            {
                "real_name": "uninitvar",
                "display_name": "uninitvar",
                "severity": "error",
                "category": "correctness",
                "rule_title": "uninitvar",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Uninitialized variable: varname",
                "disable": false
            },
            {
                "real_name": "unknownEvaluationOrder",
                "display_name": "unknownEvaluationOrder",
                "severity": "error",
                "category": "correctness",
                "rule_title": "unknownEvaluationOrder",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Expression 'x = x++;' depends on order of evaluation of side effects",
                "disable": false
            },
            {
                "real_name": "unknownSignCharArrayIndex",
                "display_name": "unknownSignCharArrayIndex",
                "severity": "info",
                "category": "convention",
                "rule_title": "unknownSignCharArrayIndex",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'char' type used as array index.",
                "disable": false
            },
            {
                "real_name": "unpreciseMathCall",
                "display_name": "unpreciseMathCall",
                "severity": "info",
                "category": "convention",
                "rule_title": "unpreciseMathCall",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.",
                "disable": false
            },
            {
                "real_name": "unreachableCode",
                "display_name": "unreachableCode",
                "severity": "info",
                "category": "convention",
                "rule_title": "unreachableCode",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Statements following return, break, continue, goto or throw will never be executed.",
                "disable": false
            },
            {
                "real_name": "unreadVariable",
                "display_name": "unreadVariable",
                "severity": "info",
                "category": "convention",
                "rule_title": "unreadVariable",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Variable 'varname' is assigned a value that is never used.",
                "disable": false
            },
            {
                "real_name": "unsafeClassCanLeak",
                "display_name": "unsafeClassCanLeak",
                "severity": "info",
                "category": "convention",
                "rule_title": "unsafeClassCanLeak",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Class 'class' is unsafe, 'class::varname' can leak by wrong usage.",
                "disable": false
            },
            {
                "real_name": "unsafeClassRefMember",
                "display_name": "unsafeClassRefMember",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "unsafeClassRefMember",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unsafe class: The const reference member 'UnsafeClass::var' is initialized by a const reference constructor argument. You need to be careful about lifetime issues.",
                "disable": false
            },
            {
                "real_name": "unsignedLessThanZero",
                "display_name": "unsignedLessThanZero",
                "severity": "info",
                "category": "convention",
                "rule_title": "unsignedLessThanZero",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Checking if unsigned expression 'varname' is less than zero.",
                "disable": false
            },
            {
                "real_name": "unsignedPositive",
                "display_name": "unsignedPositive",
                "severity": "info",
                "category": "convention",
                "rule_title": "unsignedPositive",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unsigned expression 'varname' can't be negative so it is unnecessary to test it.",
                "disable": false
            },
            {
                "real_name": "unusedAllocatedMemory",
                "display_name": "unusedAllocatedMemory",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedAllocatedMemory",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Variable 'varname' is allocated memory that is never used.",
                "disable": false
            },
            {
                "real_name": "unusedFunction",
                "display_name": "unusedFunction",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedFunction",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The function 'funcName' is never used.",
                "disable": false
            },
            {
                "real_name": "unusedLabel",
                "display_name": "unusedLabel",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedLabel",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Label '' is not used.",
                "disable": false
            },
            {
                "real_name": "unusedLabelConfiguration",
                "display_name": "unusedLabelConfiguration",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedLabelConfiguration",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Label '' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor.",
                "disable": false
            },
            {
                "real_name": "unusedLabelSwitch",
                "display_name": "unusedLabelSwitch",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "unusedLabelSwitch",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Label '' is not used. Should this be a 'case' of the enclosing switch()?",
                "disable": false
            },
            {
                "real_name": "unusedLabelSwitchConfiguration",
                "display_name": "unusedLabelSwitchConfiguration",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "unusedLabelSwitchConfiguration",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Label '' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. Should this be a 'case' of the enclosing switch()?",
                "disable": false
            },
            {
                "real_name": "unusedPrivateFunction",
                "display_name": "unusedPrivateFunction",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedPrivateFunction",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unused private function: 'classname::funcname'",
                "disable": false
            },
            {
                "real_name": "unusedScopedObject",
                "display_name": "unusedScopedObject",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedScopedObject",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Instance of 'varname' object is destroyed immediately.",
                "disable": false
            },
            {
                "real_name": "unusedStructMember",
                "display_name": "unusedStructMember",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedStructMember",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "struct member 'structname::variable' is never used.",
                "disable": false
            },
            {
                "real_name": "unusedVariable",
                "display_name": "unusedVariable",
                "severity": "info",
                "category": "convention",
                "rule_title": "unusedVariable",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Unused variable: varname",
                "disable": false
            },
            {
                "real_name": "useClosedFile",
                "display_name": "useClosedFile",
                "severity": "error",
                "category": "correctness",
                "rule_title": "useClosedFile",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Used file that is not opened.",
                "disable": false
            },
            {
                "real_name": "useInitializationList",
                "display_name": "useInitializationList",
                "severity": "info",
                "category": "convention",
                "rule_title": "useInitializationList",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Variable 'variable' is assigned in constructor body. Consider performing initialization in initialization list.",
                "disable": false
            },
            {
                "real_name": "uselessAssignmentArg",
                "display_name": "uselessAssignmentArg",
                "severity": "info",
                "category": "convention",
                "rule_title": "uselessAssignmentArg",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Assignment of function parameter has no effect outside the function.",
                "disable": false
            },
            {
                "real_name": "uselessAssignmentPtrArg",
                "display_name": "uselessAssignmentPtrArg",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uselessAssignmentPtrArg",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?",
                "disable": false
            },
            {
                "real_name": "uselessCallsCompare",
                "display_name": "uselessCallsCompare",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uselessCallsCompare",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "It is inefficient to call 'str.find(str)' as it always returns 0.",
                "disable": false
            },
            {
                "real_name": "uselessCallsEmpty",
                "display_name": "uselessCallsEmpty",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uselessCallsEmpty",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?",
                "disable": false
            },
            {
                "real_name": "uselessCallsRemove",
                "display_name": "uselessCallsRemove",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uselessCallsRemove",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Return value of std::remove() ignored. Elements remain in container.",
                "disable": false
            },
            {
                "real_name": "uselessCallsSubstr",
                "display_name": "uselessCallsSubstr",
                "severity": "info",
                "category": "convention",
                "rule_title": "uselessCallsSubstr",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Ineffective call of function 'substr' because it returns a copy of the object. Use operator= instead.",
                "disable": false
            },
            {
                "real_name": "uselessCallsSwap",
                "display_name": "uselessCallsSwap",
                "severity": "info",
                "category": "convention",
                "rule_title": "uselessCallsSwap",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "It is inefficient to swap a object with itself by calling 'str.swap(str)'",
                "disable": false
            },
            {
                "real_name": "useStlAlgorithm",
                "display_name": "useStlAlgorithm",
                "severity": "info",
                "category": "convention",
                "rule_title": "useStlAlgorithm",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Consider using  algorithm instead of a raw loop.",
                "disable": false
            },
            {
                "real_name": "varFuncNullUB",
                "display_name": "varFuncNullUB",
                "severity": "info",
                "category": "convention",
                "rule_title": "varFuncNullUB",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.",
                "disable": false
            },
            {
                "real_name": "variableScope",
                "display_name": "variableScope",
                "severity": "info",
                "category": "convention",
                "rule_title": "variableScope",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "The scope of the variable 'varname' can be reduced.",
                "disable": false
            },
            {
                "real_name": "va_end_missing",
                "display_name": "va_end_missing",
                "severity": "error",
                "category": "correctness",
                "rule_title": "va_end_missing",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "va_list 'vl' was opened but not closed by va_end().",
                "disable": false
            },
            {
                "real_name": "va_list_usedBeforeStarted",
                "display_name": "va_list_usedBeforeStarted",
                "severity": "error",
                "category": "correctness",
                "rule_title": "va_list_usedBeforeStarted",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "va_list 'vl' used before va_start() was called.",
                "disable": false
            },
            {
                "real_name": "va_start_referencePassed",
                "display_name": "va_start_referencePassed",
                "severity": "error",
                "category": "correctness",
                "rule_title": "va_start_referencePassed",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Using reference 'arg1' as parameter for va_start() results in undefined behaviour.",
                "disable": false
            },
            {
                "real_name": "va_start_subsequentCalls",
                "display_name": "va_start_subsequentCalls",
                "severity": "error",
                "category": "correctness",
                "rule_title": "va_start_subsequentCalls",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "va_start() or va_copy() called subsequently on 'vl' without va_end() in between.",
                "disable": false
            },
            {
                "real_name": "va_start_wrongParameter",
                "display_name": "va_start_wrongParameter",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "va_start_wrongParameter",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "'arg1' given to va_start() is not last named argument of the function. Did you intend to pass 'arg2'?",
                "disable": false
            },
            {
                "real_name": "virtualCallInConstructor",
                "display_name": "virtualCallInConstructor",
                "severity": "info",
                "category": "convention",
                "rule_title": "virtualCallInConstructor",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Virtual function 'f' is called from constructor '' at line 1. Dynamic binding is not used.",
                "disable": false
            },
            {
                "real_name": "virtualDestructor",
                "display_name": "virtualDestructor",
                "severity": "error",
                "category": "correctness",
                "rule_title": "virtualDestructor",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Class 'Base' which is inherited by class 'Derived' does not have a virtual destructor.",
                "disable": false
            },
            {
                "real_name": "writeReadOnlyFile",
                "display_name": "writeReadOnlyFile",
                "severity": "error",
                "category": "correctness",
                "rule_title": "writeReadOnlyFile",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Write operation on a file that was opened only for reading.",
                "disable": false
            },
            {
                "real_name": "wrongmathcall",
                "display_name": "wrongmathcall",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "wrongmathcall",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Passing value '#' to #() leads to implementation-defined result.",
                "disable": false
            },
            {
                "real_name": "wrongPipeParameterSize",
                "display_name": "wrongPipeParameterSize",
                "severity": "error",
                "category": "correctness",
                "rule_title": "wrongPipeParameterSize",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Buffer 'varname' must have size of 2 integers if used as parameter of pipe().",
                "disable": false
            },
            {
                "real_name": "wrongPrintfScanfArgNum",
                "display_name": "wrongPrintfScanfArgNum",
                "severity": "error",
                "category": "correctness",
                "rule_title": "wrongPrintfScanfArgNum",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "printf format string requires 3 parameters but only 2 are given.",
                "disable": false
            },
            {
                "real_name": "wrongPrintfScanfParameterPositionError",
                "display_name": "wrongPrintfScanfParameterPositionError",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "wrongPrintfScanfParameterPositionError",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "printf: referencing parameter 2 while 1 arguments given",
                "disable": false
            },
            {
                "real_name": "zerodiv",
                "display_name": "zerodiv",
                "severity": "error",
                "category": "correctness",
                "rule_title": "zerodiv",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Division by zero.",
                "disable": false
            },
            {
                "real_name": "zerodivcond",
                "display_name": "zerodivcond",
                "severity": "error",
                "category": "correctness",
                "rule_title": "zerodivcond",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "Either the condition is redundant or there is division by zero.",
                "disable": false
            },
            {
                "real_name": "misra-c2012-1.1",
                "display_name": "misra-c2012-1.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-1.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 1.1 The program shall contain no violations of the standard C syntax and constraints and shall not exceed the implementation's translation limits. ",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-1.2",
                "display_name": "misra-c2012-1.2",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-1.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 1.2 Language extensions should not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-1.3",
                "display_name": "misra-c2012-1.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-1.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 1.3 There shall be no occurrence of undefined or critical unspecified behaviour.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-1.4",
                "display_name": "misra-c2012-1.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-1.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 1.4 Emergent language features shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-2.1",
                "display_name": "misra-c2012-2.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-2.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 2.1 A project shall not contain unreachable code.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-2.2",
                "display_name": "misra-c2012-2.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-2.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 2.2 There shall be no dead code.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-2.3",
                "display_name": "misra-c2012-2.3",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-2.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 2.3 A project should not contain unused type declarations.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-2.4",
                "display_name": "misra-c2012-2.4",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-2.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 2.4 A project should not contain unused tag declarations.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-2.5",
                "display_name": "misra-c2012-2.5",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-2.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 2.5 A project should not contain unused macro declarations.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-2.6",
                "display_name": "misra-c2012-2.6",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-2.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 2.6 A function should not contain unused label declarations.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-2.7",
                "display_name": "misra-c2012-2.7",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-2.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 2.7 There should be no unused parameters in functions.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-3.1",
                "display_name": "misra-c2012-3.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-3.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 3.1 The character sequences /* and // shall not be used within a comment.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-3.2",
                "display_name": "misra-c2012-3.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-3.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 3.2 Line-splicing shall not be used in // comments.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-4.1",
                "display_name": "misra-c2012-4.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-4.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 4.1 Octal and hexadecimal escape sequences shall be terminated.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-4.2",
                "display_name": "misra-c2012-4.2",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-4.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 4.2 Trigraphs should not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.1",
                "display_name": "misra-c2012-5.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.1 External identifiers shall be distinct.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.2",
                "display_name": "misra-c2012-5.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.2 Identifiers declared in the same scope and name space shall be distinct.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.3",
                "display_name": "misra-c2012-5.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.3 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.4",
                "display_name": "misra-c2012-5.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.4 Macro identifiers shall be distinct.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.5",
                "display_name": "misra-c2012-5.5",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.5 Identifiers shall be distinct from macro names.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.6",
                "display_name": "misra-c2012-5.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.6 A typedef name shall be a unique identifier.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.7",
                "display_name": "misra-c2012-5.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.7 A tag name shall be a unique identifier.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.8",
                "display_name": "misra-c2012-5.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-5.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 5.8 Identifiers that define objects or functions with external linkage shall be unique.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-5.9",
                "display_name": "misra-c2012-5.9",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-5.9",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 5.9 dentifiers that define objects or functions with internal linkage should be unique.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-6.1",
                "display_name": "misra-c2012-6.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-6.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 6.1 Bit-fields shall only be declared with an appropriate type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-6.2",
                "display_name": "misra-c2012-6.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-6.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 6.2 Single-bit named bit fields shall not be of a signed type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-7.1",
                "display_name": "misra-c2012-7.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-7.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 7.1 Octal constants shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-7.2",
                "display_name": "misra-c2012-7.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-7.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 7.2 A \"u\" or \"U\" suffix shall be applied to all integer constants that are represented in an unsigned type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-7.3",
                "display_name": "misra-c2012-7.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-7.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 7.3 The lowercase character 'l' shall not be used in a literal suffix.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-7.4",
                "display_name": "misra-c2012-7.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-7.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 7.4 A string literal shall not be assigned to an object unless the object's type is \"pointer to const-qualified char\".",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.1",
                "display_name": "misra-c2012-8.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.1 Types shall be explicitly specified.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.2",
                "display_name": "misra-c2012-8.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.2 Function types shall be in prototype form with named parameters.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.3",
                "display_name": "misra-c2012-8.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.3 All declarations of an object or function shall use the same names and type qualifiers.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.4",
                "display_name": "misra-c2012-8.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.4 A compatible declaration shall be visible when an object or function with external linkage is defined.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.5",
                "display_name": "misra-c2012-8.5",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.5 An external object or function shall be declared once in one and only one file.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.6",
                "display_name": "misra-c2012-8.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.6 Rule Required 8.6 An identifier with external linkage shall have exactly one external definition.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.7",
                "display_name": "misra-c2012-8.7",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-8.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 8.7 Rule Advisory 8.7 Functions and objects should not be defined with external linkage if they are referenced in only one.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.8",
                "display_name": "misra-c2012-8.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.8 Rule Required 8.8 The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.9",
                "display_name": "misra-c2012-8.9",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-8.9",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 8.9 Rule Advisory 8.9 An object should be defined at block scope if its identifier only appears in a single function.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.10",
                "display_name": "misra-c2012-8.10",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.10",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.10 Rule Required 8.10 An inline function shall be declared with the static storage class.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.11",
                "display_name": "misra-c2012-8.11",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.11",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.11 Rule Required 8.11 When an array with external linkage is declared its size should be explicitly specified.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.12",
                "display_name": "misra-c2012-8.12",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.12",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.12 Rule Required 8.12 Within an enumerator list the value of an implicitly-specified enumeration constant shall be unique.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.13",
                "display_name": "misra-c2012-8.13",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-8.13",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 8.13 Rule Advisory 8.13 A pointer should point to a const-qualified type whenever possible.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-8.14",
                "display_name": "misra-c2012-8.14",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-8.14",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 8.14 Rule Required 8.14 The restrict type qualifier shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-9.1",
                "display_name": "misra-c2012-9.1",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-9.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 9.1 Rule Mandatory 9.1 The value of an object with automatic storage duration shall not be read before it has been set.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-9.2",
                "display_name": "misra-c2012-9.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-9.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 9.2 Rule Required 9.2 The initializer for an aggregate or union shall be enclosed in bracese.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-9.3",
                "display_name": "misra-c2012-9.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-9.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 9.3 Rule Required 9.3 Arrays shall not be partially initialized.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-9.4",
                "display_name": "misra-c2012-9.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-9.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 9.4 Rule Required 9.4 An element of an object shall not be initialised more than once.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-9.5",
                "display_name": "misra-c2012-9.5",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-9.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 9.5 Rule Required 9.5 Where designated initialisers are used to initialize an array object the size of the array shall be specified explicitly.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.1",
                "display_name": "misra-c2012-10.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-10.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 10.1 Rule Required 10.1 Operands shall not be of an inappropriate essential type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.2",
                "display_name": "misra-c2012-10.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-10.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 10.2 Rule Required 10.2 Expressions of essentially character type shall not be used inappropriately in addition and.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.3",
                "display_name": "misra-c2012-10.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-10.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 10.3 Rule Required 10.3 The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.4",
                "display_name": "misra-c2012-10.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-10.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 10.4 Rule Required 10.4 Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.5",
                "display_name": "misra-c2012-10.5",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-10.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 10.5 Rule Advisory 10.5 The value of an expression should not be cast to an inappropriate essential type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.6",
                "display_name": "misra-c2012-10.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-10.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 10.6 Rule Required 10.6 The value of a composite expression shall not be assigned to an object with wider essential type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.7",
                "display_name": "misra-c2012-10.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-10.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 10.7 Rule Required 10.7 If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-10.8",
                "display_name": "misra-c2012-10.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-10.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 10.8 Rule Required 10.8 The value of a composite expression shall not be cast to a different essential type category or a wider essential type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.1",
                "display_name": "misra-c2012-11.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-11.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 11.1 Rule Required 11.1 Conversions shall not be performed between a pointer to a function and any other type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.2",
                "display_name": "misra-c2012-11.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-11.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 11.2 Rule 11.2 Required Conversions shall not be performed between a pointer to incomplete and any other type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.3",
                "display_name": "misra-c2012-11.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-11.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 11.3 A cast shall not be performed between a pointer to object type and a pointer to a different object type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.4",
                "display_name": "misra-c2012-11.4",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-11.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 11.4 A conversion should not be performed between a pointer to.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.5",
                "display_name": "misra-c2012-11.5",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-11.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 11.5 A conversion should not be performed from pointer to void into pointer to object.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.6",
                "display_name": "misra-c2012-11.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-11.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 11.6 A cast shall not be performed between pointer to void and an.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.7",
                "display_name": "misra-c2012-11.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-11.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 11.7 A cast shall not be performed between pointer to object and a non-integer arithmetic type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.8",
                "display_name": "misra-c2012-11.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-11.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 11.8 A cast shall not remove any const or volatile qualification from the type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-11.9",
                "display_name": "misra-c2012-11.9",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-11.9",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 11.9 The macro NULL shall be the only permitted form of integer null pointer constant.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-12.1",
                "display_name": "misra-c2012-12.1",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-12.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 12.1 The precedence of operators within expressions should be made explicit.(\u8868\u8fbe\u5f0f\u4e2d\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u5e94\u8be5\u660e\u786e\u3002)",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-12.2",
                "display_name": "misra-c2012-12.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-12.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 12.2 The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-12.3",
                "display_name": "misra-c2012-12.3",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-12.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 12.3 The comma operator should not be used.(\u4e0d\u5e94\u8be5\u4f7f\u7528\u9017\u53f7\u64cd\u4f5c\u7b26\u3002)",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-12.4",
                "display_name": "misra-c2012-12.4",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-12.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 12.4 Evaluation of constant expressions should not lead to unsigned integer.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-13.1",
                "display_name": "misra-c2012-13.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-13.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 13.1 Initialiser lists shall not contain persistent side effects.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-13.2",
                "display_name": "misra-c2012-13.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-13.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 13.2 The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-13.3",
                "display_name": "misra-c2012-13.3",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-13.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 13.3 A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator.(\u5305\u542b++\u6216--\u7684\u8bed\u53e5\u4e0d\u5e94\u8be5\u6709\u5176\u4ed6\u6f5c\u5728\u7684\u526f\u4f5c\u7528\u3002)",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-13.4",
                "display_name": "misra-c2012-13.4",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-13.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 13.4 The result of an assignment operator should not be used.(\u4e0d\u8981\u4f7f\u7528\u8d4b\u503c\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u5982if(a=2),\u4e5f\u4e0d\u8981\u8fde\u7eed\u8d4b\u503c\uff0c\u5982a=b=c=2\u3002)",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-13.5",
                "display_name": "misra-c2012-13.5",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-13.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 13.5 The right hand operand of a logical && or || operator shall not contain persistent side effects.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-13.6",
                "display_name": "misra-c2012-13.6",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-13.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 13.6 The operand of the sizeof operator shall not contain any expression which has potential side effects.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-14.1",
                "display_name": "misra-c2012-14.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-14.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 14.1 A loop counter shall not have essentially floating type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-14.2",
                "display_name": "misra-c2012-14.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-14.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 14.2 A for loop shall be well-formed.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-14.3",
                "display_name": "misra-c2012-14.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-14.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 14.3 Controlling expressions shall not be invariant.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-14.4",
                "display_name": "misra-c2012-14.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-14.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 14.4 The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-15.1",
                "display_name": "misra-c2012-15.1",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-15.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 15.1 The goto statement should not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-15.2",
                "display_name": "misra-c2012-15.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-15.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 15.2 The goto statement shall jump to a label declared later in the same function.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-15.3",
                "display_name": "misra-c2012-15.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-15.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 15.3 Any label referenced by a goto statement shall be declared in the same block or in any block enclosing the goto statement.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-15.4",
                "display_name": "misra-c2012-15.4",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-15.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 15.4 There should be no more than one break or goto statement used to terminate any iteration statement.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-15.5",
                "display_name": "misra-c2012-15.5",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-15.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 15.5 A function should have a single point of exit at the end.(\u51fd\u6570\u5e94\u8be5\u53ea\u6709\u4e00\u4e2areturn\u7684\u5730\u65b9\u3002)",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-15.6",
                "display_name": "misra-c2012-15.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-15.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 15.6 The body of an iteration-statement or a selection-statement shall be a compound statement.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-15.7",
                "display_name": "misra-c2012-15.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-15.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 15.7 All if else if constructs shall be terminated with an else statement.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-16.1",
                "display_name": "misra-c2012-16.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-16.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 16.1 All switch statements shall be well-formed.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-16.2",
                "display_name": "misra-c2012-16.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-16.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 16.2 A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-16.3",
                "display_name": "misra-c2012-16.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-16.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 16.3 An unconditional break statement shall terminate every switch-clause.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-16.4",
                "display_name": "misra-c2012-16.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-16.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 16.4 Every switch statement shall have a default label.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-16.5",
                "display_name": "misra-c2012-16.5",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-16.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 16.5 A default label shall appear as either the first or the last switch label of a switch statement.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-16.6",
                "display_name": "misra-c2012-16.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-16.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 16.6 Every switch statement shall have at least two switch-clauses.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-16.7",
                "display_name": "misra-c2012-16.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-16.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 16.7 A switch-expression shall not have essentially Boolean type.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.1",
                "display_name": "misra-c2012-17.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-17.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 17.1 The features of <stdarg.h> shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.2",
                "display_name": "misra-c2012-17.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-17.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 17.2 Functions shall not call themselves, either directly or indirectly.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.3",
                "display_name": "misra-c2012-17.3",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-17.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 17.3 A function shall not be declared implicitly.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.4",
                "display_name": "misra-c2012-17.4",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-17.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 17.4 All exit paths from a function with non-void return type shall have an explicit return statement with an expression.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.5",
                "display_name": "misra-c2012-17.5",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-17.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 17.5 The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.6",
                "display_name": "misra-c2012-17.6",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-17.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 17.6 The declaration of an array parameter shall not contain the static keyword between the [ ].",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.7",
                "display_name": "misra-c2012-17.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-17.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 17.7 The value returned by a function having non-void return type shall be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-17.8",
                "display_name": "misra-c2012-17.8",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-17.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 17.8 A function parameter should not be modified.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.1",
                "display_name": "misra-c2012-18.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-18.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 18.1 A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.2",
                "display_name": "misra-c2012-18.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-18.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 18.2 Subtraction between pointers shall only be applied to pointers that address elements of the same array.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.3",
                "display_name": "misra-c2012-18.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-18.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 18.3 The relational operators '>'  '>='  '<' and '<=' shall not be applied to objects of pointer type except where they point into the same object.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.4",
                "display_name": "misra-c2012-18.4",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-18.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 18.4 The '+'  '-' '+=' and '-=' operators should not be applied to an expression of.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.5",
                "display_name": "misra-c2012-18.5",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-18.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 18.5 Declarations should contain no more than two levels of pointer nesting.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.6",
                "display_name": "misra-c2012-18.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-18.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 18.6 The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.7",
                "display_name": "misra-c2012-18.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-18.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 18.7 Flexible array members shall not be declared.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-18.8",
                "display_name": "misra-c2012-18.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-18.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 18.8 Variable-length array types shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-19.1",
                "display_name": "misra-c2012-19.1",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-19.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 19.1 An object shall not be assigned or copied to an overlapping object.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-19.2",
                "display_name": "misra-c2012-19.2",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-19.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 19.2 The union keyword should not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.1",
                "display_name": "misra-c2012-20.1",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-20.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 20.1 #include directives should only be preceded by preprocessor directives or comments.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.2",
                "display_name": "misra-c2012-20.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.2 The ', \" or \\ characters and the /* or // character sequences shall not occur in a header file name.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.3",
                "display_name": "misra-c2012-20.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.3 The #include directive shall be followed by either a <filename> or \"filename\" sequence.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.4",
                "display_name": "misra-c2012-20.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.4 A macro shall not be defined with the same name as a keyword.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.5",
                "display_name": "misra-c2012-20.5",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-20.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 20.5 #undef should not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.6",
                "display_name": "misra-c2012-20.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.6 Tokens that look like a preprocessing directive shall not occur within a macro argument.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.7",
                "display_name": "misra-c2012-20.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.7 Expressions resulting from the expansion of macro parameters shall.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.8",
                "display_name": "misra-c2012-20.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.8 The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.9",
                "display_name": "misra-c2012-20.9",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.9",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.9 All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.10",
                "display_name": "misra-c2012-20.10",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-20.10",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 20.10 The # and ## preprocessor operators should not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.11",
                "display_name": "misra-c2012-20.11",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.11",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.11 A macro parameter immediately following a # operator shall not immediately be followed by a ## operator.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.12",
                "display_name": "misra-c2012-20.12",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.12",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.12 A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.13",
                "display_name": "misra-c2012-20.13",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.13",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.13 A line whose first token is # shall be a valid preprocessing directive.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-20.14",
                "display_name": "misra-c2012-20.14",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-20.14",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 20.14 All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.1",
                "display_name": "misra-c2012-21.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Requirede 21.1 #define and #undef shall not be used on a reserved identifier or reserved macro name.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.2",
                "display_name": "misra-c2012-21.2",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.2 A reserved identifier or macro name shall not be declared.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.3",
                "display_name": "misra-c2012-21.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.3 The memory allocation and deallocation functions of <stdlib.h> shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.4",
                "display_name": "misra-c2012-21.4",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.4 The standard header file <setjmp.h> shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.5",
                "display_name": "misra-c2012-21.5",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.5 The standard header file <signal.h> shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.6",
                "display_name": "misra-c2012-21.6",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.6 The Standard Library input/output routines shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.7",
                "display_name": "misra-c2012-21.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.7 The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.8",
                "display_name": "misra-c2012-21.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.8 The library functions abort, exit, getenv and system of <stdlib.h>.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.9",
                "display_name": "misra-c2012-21.9",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.9",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.9 The library functions bsearch and qsort of <stdlib.h> shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.10",
                "display_name": "misra-c2012-21.10",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.10",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.10 The Standard Library time and date routines shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.11",
                "display_name": "misra-c2012-21.11",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.11",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.11 The standard header file <tgmath.h> shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.12",
                "display_name": "misra-c2012-21.12",
                "severity": "info",
                "category": "correctness",
                "rule_title": "misra-c2012-21.12",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Advisory 21.12 The exception handling features of <fenv.h> should not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.13",
                "display_name": "misra-c2012-21.13",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-21.13",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 21.13 Any value passed to a function in <ctype.h> shall be representable as an unsigned char or be the value EO",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.14",
                "display_name": "misra-c2012-21.14",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.14",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.14 The Standard Library function memcmp shall not be used to compare null terminated strings",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.15",
                "display_name": "misra-c2012-21.15",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.15",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.15 The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.16",
                "display_name": "misra-c2012-21.16",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.16",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.16 The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.17",
                "display_name": "misra-c2012-21.17",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-21.17",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 21.17 Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.18",
                "display_name": "misra-c2012-21.18",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-21.18",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 21.18 The size_t argument passed to any function in <string.h> shall have an appropriate value",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.19",
                "display_name": "misra-c2012-21.19",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-21.19",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 21.19 The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.20",
                "display_name": "misra-c2012-21.20",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-21.20",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 21.20 The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-21.21",
                "display_name": "misra-c2012-21.21",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-21.21",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 21.21 The Standard Library function system of shall not be used.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.1",
                "display_name": "misra-c2012-22.1",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-22.1",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 22.1 All resources obtained dynamically by means of Standard Library functions shall be explicitly released.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.2",
                "display_name": "misra-c2012-22.2",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-22.2",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 22.2 A block of memory shall only be freed if it was allocated by means of a Standard Library function.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.3",
                "display_name": "misra-c2012-22.3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-22.3",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 22.3 The same file shall not be open for read and write access at the same time on different streams.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.4",
                "display_name": "misra-c2012-22.4",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-22.4",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 22.4 There shall be no attempt to write to a stream which has been opened as read-only",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.5",
                "display_name": "misra-c2012-22.5",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-22.5",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 22.5 A pointer to a FILE object shall not be dereferenced.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.6",
                "display_name": "misra-c2012-22.6",
                "severity": "error",
                "category": "correctness",
                "rule_title": "misra-c2012-22.6",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Mandatory 22.6 The value of a pointer to a FILE shall not be used after the associated stream has been closed.",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.7",
                "display_name": "misra-c2012-22.7",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-22.7",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required 22.7 The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.8",
                "display_name": "misra-c2012-22.8",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-22.8",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required The value of errno shall be set to zero prior to a call to an errno-setting-function",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.9",
                "display_name": "misra-c2012-22.9",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-22.9",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required The value of errno shall be tested against zero after calling an errno-setting-function",
                "disable": false,
                "labels": []
            },
            {
                "real_name": "misra-c2012-22.10",
                "display_name": "misra-c2012-22.10",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "misra-c2012-22.10",
                "rule_params": "",
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": null,
                "owner": null,
                "description": "Rule Required The value of errno shall only be tested when the last function to be called was an errno-setting-function",
                "disable": false,
                "labels": []
            }
        ],
        "open_user": true,
        "open_saas": true
    }
]